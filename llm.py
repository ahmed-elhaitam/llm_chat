import streamlit as st
import pandas as pd
from langchain_groq import ChatGroq
from langchain.schema import HumanMessage, AIMessage
from PyPDF2 import PdfReader

# Initialize LLM
llm = ChatGroq(
    model_name="llama-3.1-70b-versatile",
    groq_api_key="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",
    temperature=0
)

# Initialize session state for conversation history
if "messages" not in st.session_state:
    st.session_state["messages"] = []

# Page configuration
st.set_page_config(
    page_title="LLM Orientation Assistant",
    page_icon="üéì",
    layout="wide"
)

# Sidebar with advanced filtering options
st.sidebar.title("üîç Filtrer les √©coles")
uploaded_file = st.sidebar.file_uploader("T√©l√©chargez un fichier PDF pour le contexte :", type=["pdf"])

if uploaded_file:
    # Read PDF content
    pdf_reader = PdfReader(uploaded_file)
    text = ""
    for page_num in range(len(pdf_reader.pages)):
        text += pdf_reader.pages[page_num].extract_text()

    # Display PDF content
    st.sidebar.markdown("### Contenu du fichier PDF :")
    st.sidebar.text_area("Contexte extrait du PDF", text, height=200)

# School data model with enriched information
school_data = pd.DataFrame([
        {"Nom": "√âcole des sciences de l'information", "Sigle": "ESI", "Ville": "Rabat", "Sp√©cialit√©": "Sciences de l'information", "D√©bouch√©s": "Data Analyst, Consultant en syst√®mes d'information"},
    {"Nom": "Acad√©mie internationale Mohammed VI de l'aviation civile", "Sigle": "AIAC", "Ville": "Casablanca", "Sp√©cialit√©": "M√©tiers de l'aviation", "D√©bouch√©s": "Pilote, Contr√¥leur a√©rien"},
    {"Nom": "√âcole Hassania des travaux publics", "Sigle": "EHTP", "Ville": "Casablanca", "Sp√©cialit√©": "Polyvalente", "D√©bouch√©s": "Ing√©nieur Civil, Manager de projet"},
    {"Nom": "√âcole Mohammadia d'ing√©nieurs", "Sigle": "EMI", "Ville": "Rabat", "Sp√©cialit√©": "Polyvalente", "D√©bouch√©s": "Ing√©nieur M√©canique, Consultant technique"},
    {"Nom": "√âcole nationale d'industrie min√©rale", "Sigle": "ENIM", "Ville": "Rabat", "Sp√©cialit√©": "Polyvalente", "D√©bouch√©s": "Ing√©nieur Minier, Consultant en G√©otechnique"},
    {"Nom": "√âcoles nationales des sciences appliqu√©es", "Sigle": "ENSA", "Ville": "11 villes", "Sp√©cialit√©": "Polyvalente", "D√©bouch√©s": "D√©veloppeur logiciel, Ing√©nieur √©lectronique"},
    {"Nom": "√âcole nationale sup√©rieure d'arts et m√©tiers", "Sigle": "ENSAM", "Ville": "Mekn√®s, Casablanca", "Sp√©cialit√©": "Polyvalente", "D√©bouch√©s": "Ing√©nieur en Production, Responsable de Maintenance"},
    {"Nom": "√âcole nationale sup√©rieure d'√©lectricit√© et de m√©canique de Casablanca", "Sigle": "ENSEM", "Ville": "Casablanca", "Sp√©cialit√©": "Ing√©nieurs √©lectro-m√©caniciens, G√©nie informatique", "D√©bouch√©s": "Ing√©nieur √âlectrique, D√©veloppeur Syst√®mes embarqu√©s"},
    {"Nom": "√âcole nationale sup√©rieure d'informatique et d'analyse des syst√®mes", "Sigle": "ENSIAS", "Ville": "Rabat", "Sp√©cialit√©": "M√©tiers de l'informatique", "D√©bouch√©s": "D√©veloppeur logiciel, Expert en s√©curit√© informatique"},
    {"Nom": "√âcole sup√©rieure des industries du textile et de l'habillement", "Sigle": "ESITH", "Ville": "Casablanca", "Sp√©cialit√©": "G√©nie industriel", "D√©bouch√©s": "Ing√©nieur Logistique, Responsable de production"},
    {"Nom": "Institut agronomique et v√©t√©rinaire Hassan II", "Sigle": "IAV", "Ville": "Rabat", "Sp√©cialit√©": "Agronomie, topographie", "D√©bouch√©s": "Agronome, Sp√©cialiste en gestion des ressources naturelles"},
    {"Nom": "Institut national des postes et t√©l√©communications", "Sigle": "INPT", "Ville": "Rabat", "Sp√©cialit√©": "M√©tiers des t√©l√©coms et des technologies d'information et de communication", "D√©bouch√©s": "Ing√©nieur T√©l√©coms, Administrateur R√©seaux"},
    {"Nom": "Institut national de statistique et d'√©conomie appliqu√©e", "Sigle": "INSEA", "Ville": "Rabat", "Sp√©cialit√©": "M√©tiers de l'informatique, de l'√©conomie, statistique et finance", "D√©bouch√©s": "Data Scientist, Analyste financier"},
    {"Nom": "Cycle Ing√©nieur des facult√©s des sciences et techniques", "Sigle": "FST", "Ville": "5 villes", "Sp√©cialit√©": "Polyvalente", "D√©bouch√©s": "Ing√©nieur dans divers secteurs, Consultant IT"},
    {"Nom": "Ecole Normale Sup√©rieure de l'Enseignement Technique", "Sigle": "ENSET", "Ville": "Mohammedia, Rabat", "Sp√©cialit√©": "Polyvalente", "D√©bouch√©s": "Formateur technique, Responsable P√©dagogique"},
    {"Nom": "√âcole Sup√©rieure des Sciences et Technologies de l'Ing√©nierie", "Sigle": "ESSTI", "Ville": "Rabat", "Sp√©cialit√©": "Polyvalente", "D√©bouch√©s": "Ing√©nieur en d√©veloppement, Consultant industriel"},
    {"Nom": "√âcole Centrale Casablanca", "Sigle": "ECC", "Ville": "Casablanca", "Sp√©cialit√©": "G√©n√©raliste", "D√©bouch√©s": "Ing√©nieur g√©n√©raliste, Chef de projet"}
])

# Display data
st.title("üéì Assistant d'Orientation - LLM")
st.markdown("**Explorez les √©coles, d√©couvrez les formations, et obtenez des r√©ponses adapt√©es avec un chatbot IA.**")

# School selection and details
selected_school = st.selectbox("Choisissez une √©cole :", school_data["Nom"])
school_info = school_data[school_data["Nom"] == selected_school].iloc[0]

# Display school details
st.subheader("üìç Informations sur l'√©cole")
st.markdown(f"**Nom :** {school_info['Nom']}")
st.markdown(f"**Ville :** {school_info['Ville']}")
st.markdown(f"**Sp√©cialit√© :** {school_info['Sp√©cialit√©']}")

st.subheader("üéØ D√©bouch√©s")
st.markdown(f"**D√©bouch√©s :** {school_info['D√©bouch√©s']}")

# Interaction with LLM
st.markdown("### üí¨ Posez une question :")
user_input = st.text_input("Votre question :", "")

if st.button("Envoyer"):
    if user_input.strip():
        with st.spinner("Chargement..."):
            try:
                # Combine question with school context
                message = f"L'utilisateur a s√©lectionn√© l'√©cole {school_info['Nom']} ({school_info['Ville']}). Question : {user_input}"
                st.session_state["messages"].append(HumanMessage(content=message))

                # Generate LLM response
                response = llm.invoke(st.session_state["messages"])

                # Add response to conversation history
                st.session_state["messages"].append(AIMessage(content=response.content))

                # Display response
                st.success("R√©ponse g√©n√©r√©e üéâ")
                st.markdown(f"**ü§ñ LLM :** {response.content}")
            except Exception as e:
                st.error(f"Une erreur s'est produite : {e}")
    else:
        st.warning("Veuillez entrer une question avant d'envoyer.")
