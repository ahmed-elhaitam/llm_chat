import streamlit as st
import pandas as pd
import plotly.express as px
from langchain_groq import ChatGroq
from langchain.schema import HumanMessage, AIMessage

# Initialize LLM
llm = ChatGroq(
    model_name="llama-3.1-70b-versatile",
    groq_api_key="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",
    temperature=0
)

# Initialize session state for conversation history
if "messages" not in st.session_state:
    st.session_state["messages"] = []

# Page configuration
st.set_page_config(
    page_title="LLM Orientation Assistant",
    page_icon="üéì",
    layout="wide"
)

# Sidebar with advanced filtering options
st.sidebar.title("üîç Filtrer les √©coles")
specialites = st.sidebar.multiselect(
    "Sp√©cialit√©s d'√©tudes",
    [
        "Polyvalente", "Informatique", "Ing√©nieurs",
        "T√©l√©communications", "Agronomie", "G√©n√©raliste", "M√©tiers de l'aviation",
    ],
    default=[]
)
location = st.sidebar.selectbox(
    "Localisation",
    ["Toutes", "Casablanca", "Rabat", "11 villes", "5 villes", "Mohammedia", "Mekn√®s"],
    index=0
)

# Enriched school data model
school_data = pd.DataFrame([
    {"Nom": "Acad√©mie internationale Mohammed VI de l'aviation civile", "Sigle": "AIAC", "Ville": "Casablanca", "Sp√©cialit√©": "M√©tiers de l'aviation", "Formations": ["Pilotage", "Gestion a√©rienne"], "D√©bouch√©s": "Pilote, Contr√¥leur a√©rien"},
    {"Nom": "√âcole Hassania des travaux publics", "Sigle": "EHTP", "Ville": "Casablanca", "Sp√©cialit√©": "Polyvalente", "Formations": ["G√©nie Civil", "Hydraulique"], "D√©bouch√©s": "Ing√©nieur Civil, Manager de projet"},
    {"Nom": "√âcole Mohammadia d'ing√©nieurs", "Sigle": "EMI", "Ville": "Rabat", "Sp√©cialit√©": "Polyvalente", "Formations": ["G√©nie Informatique", "G√©nie M√©canique"], "D√©bouch√©s": "Ing√©nieur M√©canique, Consultant technique"},
    {"Nom": "√âcoles nationales des sciences appliqu√©es", "Sigle": "ENSA", "Ville": "11 villes", "Sp√©cialit√©": "Polyvalente", "Formations": ["D√©veloppement logiciel", "R√©seaux"], "D√©bouch√©s": "D√©veloppeur logiciel, Ing√©nieur √©lectronique"},
    {"Nom": "Institut national des postes et t√©l√©communications", "Sigle": "INPT", "Ville": "Rabat", "Sp√©cialit√©": "T√©l√©communications", "Formations": ["Ing√©nierie T√©l√©coms"], "D√©bouch√©s": "Ing√©nieur T√©l√©coms, Administrateur R√©seaux"},
    {"Nom": "Institut national de statistique et d'√©conomie appliqu√©e", "Sigle": "INSEA", "Ville": "Rabat", "Sp√©cialit√©": "Statistiques", "Formations": ["Data Science", "Analyse Financi√®re"], "D√©bouch√©s": "Data Scientist, Analyste financier"},
    {"Nom": "√âcole nationale sup√©rieure d'informatique et d'analyse des syst√®mes", "Sigle": "ENSIAS", "Ville": "Rabat", "Sp√©cialit√©": "Informatique", "Formations": ["Intelligence Artificielle", "Cybers√©curit√©"], "D√©bouch√©s": "D√©veloppeur logiciel, Expert en cybers√©curit√©"},
])

# Apply filters
filtered_schools = school_data.copy()
if specialites:
    filtered_schools = filtered_schools[filtered_schools["Sp√©cialit√©"].str.contains("|".join(specialites), case=False)]
if location != "Toutes":
    filtered_schools = filtered_schools[filtered_schools["Ville"] == location]

# Display data
st.title("üéì Assistant d'Orientation - LLM")
st.markdown("**Explorez les √©coles, d√©couvrez les formations, et obtenez des r√©ponses adapt√©es avec un chatbot IA.**")

# Pie chart visualization
st.sidebar.markdown("### üìä R√©partition des √âcoles")
fig = px.pie(school_data, names="Ville", title="R√©partition des √©coles par localisation")
st.sidebar.plotly_chart(fig, use_container_width=True)

# Two-column layout for school details
col1, col2 = st.columns(2)

# School selection and details
if not filtered_schools.empty:
    selected_school = st.selectbox("Choisissez une √©cole :", filtered_schools["Nom"])
    school_info = filtered_schools[filtered_schools["Nom"] == selected_school].iloc[0]

    # Display school details
    with col1:
        st.subheader("üìç Informations sur l'√©cole")
        st.markdown(f"**Nom :** {school_info['Nom']}")
        st.markdown(f"**Ville :** {school_info['Ville']}")
        st.markdown(f"**Sp√©cialit√© :** {school_info['Sp√©cialit√©']}")

    with col2:
        st.subheader("üéì Formations disponibles")
        formations = school_info["Formations"]
        for formation in formations:
            st.markdown(f"- {formation}")

        st.subheader("üéØ D√©bouch√©s")
        st.markdown(f"**D√©bouch√©s :** {school_info['D√©bouch√©s']}")
else:
    st.warning("Aucune √©cole correspondante aux crit√®res s√©lectionn√©s.")

# Interaction with LLM
st.markdown("### üí¨ Posez une question :")
user_input = st.text_input("Votre question :", "")

if st.button("Envoyer"):
    if user_input.strip():
        with st.spinner("Chargement..."):
            try:
                # Combine question with school context
                message = f"L'utilisateur a s√©lectionn√© l'√©cole {school_info['Nom']} ({school_info['Ville']}). Question : {user_input}"
                st.session_state["messages"].append(HumanMessage(content=message))

                # Generate LLM response
                response = llm.invoke(st.session_state["messages"])

                # Add response to conversation history
                st.session_state["messages"].append(AIMessage(content=response.content))

                # Display response
                st.success("R√©ponse g√©n√©r√©e üéâ")
                st.markdown(f"**ü§ñ LLM :** {response.content}")
            except Exception as e:
                st.error(f"Une erreur s'est produite : {e}")
    else:
        st.warning("Veuillez entrer une question avant d'envoyer.")
